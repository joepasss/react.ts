import Head from "next/head";
import { useRouter } from "next/router";
import { initializeApollo } from "../backend/client";
import CreateTaskForm from "../components/CreateTaskForm";
import TaskFilter from "../components/TaskFilter";
import TaskList from "../components/TaskList";
import {
  TasksDocument,
  TasksQuery,
  TasksQueryVariables,
  TaskStatus,
  useTasksQuery,
} from "../generated/graphql-frontend";
import Error from "next/error";
import { GetServerSideProps } from "next";
import { useEffect, useRef } from "react";

const isTaskStatus = (value: string): value is TaskStatus =>
  Object.values(TaskStatus).includes(value as TaskStatus);

export default function Home() {
  const router = useRouter();
  const status =
    typeof router.query.status === "string"
      ? (router.query.status as TaskStatus)
      : undefined;

  if (status !== undefined && !isTaskStatus(status)) {
    return <Error statusCode={404} />;
  }

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const prevStatus = useRef(status);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useEffect(() => {
    prevStatus.current = status;
  }, [status]);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const result = useTasksQuery({
    variables: { status },
    fetchPolicy:
      prevStatus.current === status ? "cache-first" : "cache-and-network",
  });
  const tasks = result.data?.tasks;

  return (
    <div>
      <Head>
        <title>Tasks</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <CreateTaskForm onSuccess={result.refetch} />
        {result.loading && !tasks ? (
          <p>Loading ...</p>
        ) : tasks && tasks.length > 0 ? (
          <TaskList tasks={tasks} />
        ) : (
          <p className="no-tasks-message">You&apos;ve got no tasks.</p>
        )}
        <TaskFilter status={status} />
      </main>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const status =
    typeof context.params?.status === "string"
      ? (context.params.status as TaskStatus)
      : undefined;

  if (status === undefined || isTaskStatus(status)) {
    const apolloClient = initializeApollo();

    await apolloClient.query<TasksQuery, TasksQueryVariables>({
      query: TasksDocument,
      variables: { status },
    });

    return {
      props: {
        initialApolloState: apolloClient.cache.extract(),
      },
    };
  }

  return { props: {} };
};
